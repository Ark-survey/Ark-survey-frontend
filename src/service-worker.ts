/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

// eslint-disable-next-line no-undef
declare const self: ServiceWorkerGlobalScope;

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = /\/[^\/?]+\.[^\/]+$/;
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request; url: URL }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith('/_')) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html'),
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'),
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  }),
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', async (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.
const CACHE_NAME = 'Cache'; // 可以为Cache版本号，但这样可能会导致缓存冗余累积
let cacheList = [
  'https://img.yituliu.site/static/char_0.5.webp',
  'https://img.yituliu.site/static/skill_0.5.webp',
  'https://img.yituliu.site/static/uniequip_0.5.webp',
  'https://img.yituliu.site/static/char_0.5.json',
  'https://img.yituliu.site/static/skill_0.5.json',
  'https://img.yituliu.site/static/uniequip_0.5.json',
  'https://img.yituliu.site/static/character_table.json',
];

self.addEventListener('install', async (installEvent) => {
  installEvent.waitUntil(
    caches.open(CACHE_NAME).then((cache) => {
      console.log('Opened cache');
      return cache.addAll(cacheList);
    }),
  );
  self.skipWaiting();
  // 预缓存其他静态内容
});

self.addEventListener('fetch', async (event) => {
  if (/\.webp$/.test(event.request.url) || /\.json$/.test(event.request.url)) {
    const domain = event.request.url.split('/')[2];
    event.request.url.replace(domain, 'img.yituliu.site');
    // 匹配不到，返回 读取值
    event.respondWith(
      caches.open('Cache').then(async (cache) => {
        const response = await cache.match(event.request);
        return (
          response ||
          // eslint-disable-next-line max-nested-callbacks
          fetch(event.request).then((response_1) => {
            cache.put(event.request, response_1.clone());
            return response_1;
          })
        );
      }),
    );
  } else {
    // 透明代理
    event.respondWith(fetch(event.request));
  }
});
